[{"content":"Introduction Neetcode 150 is a popular collection of Leetcode problems designed to help programmers prepare for coding interviews. However, the tutorial videos may not always provide the most comprehensive explanations for full understanding. Therefore, I\u0026rsquo;ve decided to document my thought process while solving these problems, in the hope that it might help some of my readers.\nNote: This post won\u0026#39;t cover all the questions from Neetcode 150. Instead, I\u0026#39;ll focus on the ones I found particularly tricky / challenging. I trust in your ability to know the basic logic behind each topic. Sliding window Key factor: The use of unordered_map / array Use l and r, which l stays [only change when certain condition met], r keep moving Compare array for char 26 Keep each index / count in map 424.Longest Repeating Character Replacement The key for Longest Repeating is to count the appearance of each letter in current window That leads us to know the maxCurrent in the window To make sure the window is valid, the replacement is not over k (current length - maxCurrent \u0026lt;= k). If not, move i → decrement vector[i] by 1 Two ways to do:\nvector count to keep track of numbers appearance in current window, we know the string only contains uppercase, vector\u0026lt;int\u0026gt; 26 fit\nFind the max appearance in the current window, to do so, have a function check through the vector to find the maxCurrent everytime To make sure the window is valid, the replacement is not over k (current length - maxCurrent \u0026lt;= k). If not, move i, decrement vector[i] by 1 Update Longest Have maxf only update when a greater num appears.\nreplace if statement by (j - i + 1 - maxf \u0026gt; k) class Solution { public: int findMax(const vector\u0026lt;int\u0026gt;\u0026amp; nums){ int longest = 0; for(const int\u0026amp; num : nums){ longest = max(num, longest); } return longest; } int characterReplacement(string s, int k) { vector\u0026lt;int\u0026gt; m (26, 0); int i = 0; int longest = 0; int maxf = 0; for(int j = 0; j \u0026lt; s.length(); ++j){ m[s[j] - \u0026#39;A\u0026#39;]++; maxf = max(maxf, m[s[j] - \u0026#39;A\u0026#39;]); while(i \u0026lt; s.length() \u0026amp;\u0026amp; j - i + 1 - maxf \u0026gt; k){ m[s[i] - \u0026#39;A\u0026#39;]--; i++; } longest = max(j - i + 1, longest); } return longest; } }; 425. Minimum Window Substring Mininum Window: Have two maps check currentWindow size, same thing as sliding window. The key is to Have a “form” to check if the window is valid (form == 0), once valid, start moving it until the form != 0. Have an arr[2] = {length, starting} to update the answer. Step:\nCreate two maps (dict, currentWindow), store target string into dict Create arr for answer, “form” and i Increment in currentWindow, if (dict also contain the letter and two numbers are the same), decrease “form”; While form == 0, update arr and remove s[i] from currentWindow. Same as step 3 if dict has it and dict[i] \u0026gt; currentWindow[i], increase the form. (Means the letter in currentWindow is less than / not in requirement) Return arr, or “” class Solution { public: string minWindow(string s, string t) { unordered_map\u0026lt;char, int\u0026gt; dict; unordered_map\u0026lt;char, int\u0026gt; currentWindow; for(const char\u0026amp; c : t){ dict[c]++; } int i = 0; int form = dict.size(); int arr [] = {-1, 0}; for(int j = 0; j \u0026lt; s.length(); ++j){ currentWindow[s[j]]++; if(dict.count(s[j]) \u0026amp;\u0026amp; dict[s[j]] == currentWindow[s[j]]){ form--; } while(i \u0026lt;= j \u0026amp;\u0026amp; form == 0){ if(arr[0] == -1 || j - i + 1 \u0026lt; arr[0]){ arr[0] = j - i + 1; arr[1] = i; } currentWindow[s[i]]--; if(dict.count(s[i]) \u0026amp;\u0026amp; dict[s[i]] \u0026gt; currentWindow[s[i]]){ ++form; } ++i; } } return arr[0] == -1? \u0026#34;\u0026#34; : s.substr(arr[1], arr[0]); } }; 426. Sliding Window Maximum The key for Sliding Window Maximum is if a num is maxCurrent, we don’t need any number before it. And if the incoming number is greater than deque back, we can smash it Step:\nCreate a deque to store index If deque not empty and incoming is greater, smash anything is smaller Check if dq front is out of bound (i \u0026gt; dq.front()) if(j + 1 \u0026gt;= k) push_back result and move the i. (The if statement checks if j+1 \u0026lt; k, which we haven’t insert enough elements to meet the window size, j is index, ex. If k = 3, j at least should be 2 in index) class Solution { public: vector\u0026lt;int\u0026gt; maxSlidingWindow(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { deque\u0026lt;int\u0026gt; sta; // store index int i = 0; vector\u0026lt;int\u0026gt; answer; for(int j = 0; j \u0026lt; nums.size(); ++j){ while(!sta.empty() \u0026amp;\u0026amp; nums[sta.back()] \u0026lt;= nums[j]){ sta.pop_back(); } sta.push_back(j); if(sta.front() \u0026lt; i){ sta.pop_front(); } if(j - i + 1 \u0026gt;= k){ answer.push_back(nums[sta.front()]); ++i; } } return answer; } }; Stack 155. Min Stack The key of Min Stack is to use two stacks: nums and min_stack. The nums stack stores all the values, while the min_stack only stores the current minimum values and updates when a new value is less than or equal to the top of the stack.\nYou might wonder, \u0026ldquo;What about when the incoming value is greater than the top of the stack? Shouldn\u0026rsquo;t it be stored in min_stack too?\u0026rdquo; The answer is no. You might think that if a larger value should be stored somewhere at the bottom of min_stack so that when all the smaller numbers are popped, this larger value will be needed. But that\u0026rsquo;s not true. When pop() is called, larger numbers will be popped before smaller ones, so there\u0026rsquo;s no need to store them in min_stack.\nThere are two approaches to solving this:\nCreate nums and min_stack.\nFor Push(): push the value into nums and push into min_stack only if the condition is met.\nFor Pop(): pop from min_stack only if nums.top() == min_stack.top().\nConsider a scenario where the input is something like // 2 2 2 2 2. We don’t want to store all these values in the stack. Instead, create a pair\u0026lt;int, appearance\u0026gt; to keep track of the numbers and their frequencies.\nclass MinStack { public: //2 2 2 2 2 2 2 // {2, 7} stack\u0026lt;int\u0026gt; nums; stack\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; min_stack; MinStack() { } void push(int val) { nums.push(val); if(min_stack.empty() || val \u0026lt; min_stack.top().first){ min_stack.push({val, 1}); }else if(val == min_stack.top().first){ min_stack.top().second++; } } void pop() { if(!min_stack.empty() \u0026amp;\u0026amp; min_stack.top().first == nums.top()){ min_stack.top().second--; if(min_stack.top().second == 0){ min_stack.pop(); } } nums.pop(); } int top() { return nums.top(); } int getMin() { return min_stack.top().first; } }; 150. Evaluate Reverse Polish Notation Polish Notation should be straightforward, the key is pushed back to stack every time the calculation is done! Step:\nCreate a stack\nCheck if val is digit, if so, push to stack and continue; If(token.size() \u0026gt; 1 || isdigit(token[0])) If we skip step 2, then val is an operator. Perform the operator and store it back to stack. Eventually the stack will have only one num (the answer), return stack.top() class Solution { public: bool isoper(string s){ return s.length() == 1 \u0026amp;\u0026amp; (s == \u0026#34;+\u0026#34; || s== \u0026#34;-\u0026#34; || s== \u0026#34;*\u0026#34; || s== \u0026#34;/\u0026#34;); } int calculator(int num1, int num2, char op){ switch(op){ case \u0026#39;+\u0026#39;: return num1 + num2; case \u0026#39;-\u0026#39;: return num1 - num2; case \u0026#39;*\u0026#39;: return num1 * num2; case \u0026#39;/\u0026#39;: return num1 / num2; } return 0; } int evalRPN(vector\u0026lt;string\u0026gt;\u0026amp; tokens) { if(tokens.size() == 1){ return stoi(tokens[0]); } stack\u0026lt;int\u0026gt; sta; int answer = 0; for(int i = 0; i \u0026lt; tokens.size(); ++i){ if(!isoper(tokens[i])){ sta.push(stoi(tokens[i])); }else{ int num2 = sta.top(); sta.pop(); int num1 = sta.top(); sta.pop(); answer = calculator(num1, num2, tokens[i][0]); sta.push(answer); } } return answer; } }; 22. Generate Parentheses For generate parentheses We should know that we need “open” and “close” to both equal to n to push Whenever open == close, ex: () / (( )) // () (), we could only add an open bracket. Therefore we should visit open bracket first Only adding a close bracket if close \u0026lt; open, means we have extra open to be matched. Step:\nBacktracking, we should create a helper function (vector answer, string temp, int n, int open, int close) If open and close both == n, push into answer If open \u0026lt; n, temp push an open bracket and helper(open + 1), finally remove temp.back If open \u0026gt; close, same thing, but push close bracket. class Solution { public: void helper(vector\u0026lt;string\u0026gt;\u0026amp; answer, string\u0026amp; temp, int n, int open, int close){ if(open == n \u0026amp;\u0026amp; close == n){ answer.push_back(temp); return; } if(open \u0026lt; n){ temp += \u0026#39;(\u0026#39;; helper(answer, temp, n, open + 1, close); temp.pop_back(); } if(open \u0026gt; close){ temp += \u0026#39;)\u0026#39;; helper(answer, temp, n, open, close + 1); temp.pop_back(); } } vector\u0026lt;string\u0026gt; generateParenthesis(int n) { vector\u0026lt;string\u0026gt; answer; string temp = \u0026#34;\u0026#34;; helper(answer, temp, n, 0, 0); return answer; } }; 23. Daily Temperatures For Daily Temperatures, I’m correct with monolithic stack in the first place and obtained a solution by myself. The key is having a pair {temperature, index} in the stack. And pop only if currentTemp is higher [warmer], else push into stack Step:\nCreate a stack and vector for answer If sta not empty \u0026amp;\u0026amp; currentTemp \u0026gt; sta.top() answer[sta.top().second] = the gap in days pop from stack Else, push into stack class Solution { public: //monolithic stack vector\u0026lt;int\u0026gt; dailyTemperatures(vector\u0026lt;int\u0026gt;\u0026amp; temperatures) { stack\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; sta; vector\u0026lt;int\u0026gt; answer (temperatures.size()); for(int i = 0; i \u0026lt; temperatures.size(); ++i){ // if(sta.empty() || sta.top().first \u0026gt;= temperatures[i]){ // sta.push({temperatures[i], i}); // continue; // } while(!sta.empty() \u0026amp;\u0026amp; sta.top().first \u0026lt; temperatures[i]){ answer[sta.top().second] = i - sta.top().second; sta.pop(); } sta.push({temperatures[i],i}); } return answer; } }; 24. Car Fleet The key of Car Fleet that we are dealing with the time cars get to the destination based on position and speed. Then if two cars spend the same time getting to the final, they will meet. Or the car behind spends less time (faster) to reach, they will also meet. Step:\nCreate a vector\u0026lt;position, double time\u0026gt; and store all the values Sort the vector based on position Make a fleet counter and maxTime Start from the back where the car is the closest to destination, and if the time it spends is greater than maxTime means the currentTime is not catching the previous carfleet, we should therefore increment the carfleet by one and update maxTime class Solution { public: int carFleet(int target, vector\u0026lt;int\u0026gt;\u0026amp; position, vector\u0026lt;int\u0026gt;\u0026amp; speed) { vector\u0026lt;pair\u0026lt;int, double\u0026gt;\u0026gt; cars(position.size()); //(destination - position[i] / speed[i]) for(int i = 0; i \u0026lt; position.size(); ++i){ double time = (double)(target - position[i]) / speed[i]; cars[i] = {position[i], time}; } sort(cars.begin(), cars.end()); int carFleet = 0; double maxTime = 0.0; for(int i = cars.size() - 1; i \u0026gt;= 0; --i){ double time = cars[i].second; if(time \u0026gt; maxTime){ maxTime = time; carFleet++; } } return carFleet; } }; 84. Largest Rectangle in Histogram The idea for Largest Rectangle is we should know how far a unit can expand, and we should maintain it in the stack before that happens. And until when we reach a smaller height, we reach the end point, then we should pop from the stack and calculate the width (the initial point to expanding end) and height(initial height).\nFor the currentHeight, because we pop from stack until reaching a smaller unit where currentHeight cannot expand, we make that as our initial height for current.\nStep:\nCreate a stack \u0026lt;start, height\u0026gt;, maxArea for answer When stack is not empty and currentHeight is smaller, we pop the stack and update maxArea and start position of currentHeight Then push {start position, currentHeight} to stack After the loop, there are elements left in the stack which means these are heights that can expand till the end. Therefore we should update the maxArea by height * width (width is endpoint - start) class Solution { public: int largestRectangleArea(vector\u0026lt;int\u0026gt;\u0026amp; heights) { stack\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; sta; // \u0026lt;start, height\u0026gt; int maxArea = 0; for(int i = 0; i \u0026lt; heights.size(); ++i){ int start = i; while(!sta.empty() \u0026amp;\u0026amp; heights[i] \u0026lt; sta.top().second){ int width = i - sta.top().first; int height = sta.top().second; maxArea = max(maxArea, height * width); start = sta.top().first; sta.pop(); } sta.push({start,heights[i]}); } int n = heights.size(); while(!sta.empty()){ pair\u0026lt;int, int\u0026gt; p = sta.top(); sta.pop(); maxArea = max(maxArea, p.second * (n - p.first)); } return maxArea; } }; Binary Search 74. Search a 2D Matrix The key of 2D Matrix is to recognize that not only is each row ordered, but each horizontal line is also ordered. This allows us to perform a binary search on the horizontal lines to find the target row, followed by a normal binary search within that row. Step:\nCreate an up and down variable Check if the target is greater than mid[0] and less than mid.back() if so, we find the row and break. For the while loop condition, we can do up \u0026lt; down, if they equal, don\u0026rsquo;t need to check, row must be it. Else increase or decrease up and down by condition Create left and right, check matrix[row][mid], same procedure. class Solution { public: bool searchMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix, int target) { int m = matrix.size(), n = matrix[0].size(); int left = 0, right = m - 1, mid = 0; while(left \u0026lt;= right){ mid = (right - left) / 2 + left; if(matrix[mid][0] \u0026lt;= target \u0026amp;\u0026amp; target \u0026lt;= matrix[mid].back()){ break; } if(matrix[mid][0] \u0026gt; target){ right = mid - 1; }else{ left = mid + 1; } } int row = mid; left = 0, right = n - 1; while(left \u0026lt;= right){ int mid = (right - left) / 2 + left; if(matrix[row][mid] == target){ return true; }else if(target \u0026gt; matrix[row][mid]){ ++left; }else{ --right; } } return false; } }; 875. Koko Eating Bananas The key of Koko Eating Bananas is that we should decide what k bananas Koko eats, it can eat anywhere from 1 to the max in the piles, because anymore it will stop eating for one round. Therefore do a binary search based on 1 to max Step:\nCreate low = 1, high to be maxPile, answer Create an hour counting, put it long int for number floating, binary search through the array. If the hour is within time, update the answer to be minimum of (mid, answer) Hour can be calculated as: hour += pile / mid + (pile % mid != 0) Or hour += ceil((double) pile / mid) Return answer; class Solution { public: int minEatingSpeed(vector\u0026lt;int\u0026gt;\u0026amp; piles, int h) { int low = 1, high = 0; for(const int\u0026amp; pile : piles){ high = max(high, pile); } int answer = high; while(low \u0026lt;= high){ int mid = (high - low) / 2 + low; long int hour = 0; for(const int\u0026amp; pile : piles){ hour += pile / mid + (pile % mid != 0); } if(hour \u0026lt;= h){ answer = min(mid, answer); high = mid - 1; }else{ low = mid + 1; } } return answer; } }; 153. Find Minimum in Rotated Sorted Array For Find Minimum in Rotated Array, I am right in the first place:\nin a normal situation: left \u0026lt; mid \u0026lt; right, if rotation happens, where mid \u0026gt; right : “4 5 6 7 1 2 3”, left = mid + 1. Else, it means mid \u0026lt;= right, which is a normal array or “6 7 1 2 3” where mid is the number. Set right = mid; Also for the while condition, we do left \u0026lt; right, we don\u0026rsquo;t need to check left == right. Because if left even equals to right, we found the minimum value\nStep:\nCreate left and right while(left \u0026lt; right), if (mid \u0026gt; right) left = mid + 1. Else right = mid; Return nums[left] or nums[right] class Solution { public: int findMin(vector\u0026lt;int\u0026gt;\u0026amp; nums) { //find the rotation point // suppose: Left \u0026lt; right // left \u0026lt; mid \u0026lt; right // right \u0026lt; mid: 4 5 6 7 1 2 3, left = mid + 1 // right \u0026gt; mid: 8 2 3 4 5 6 7, right = mid int left = 0, right = nums.size() - 1, mid = 0; while(left \u0026lt; right){ mid = (right - left) / 2 + left; if(nums[right] \u0026gt;= nums[mid]){ right = mid; }else{ left = mid + 1; } } return nums[left]; //binary search } }; 33. Search in Rotated Sorted Array There are two ways to do Search in Rotated Sorted Array. One as we know, find the minimum rotation starter, and see if the target is a left or right sorted array. Another way is to do everything in one shot, which determines if the array is left sorted or right sorted. Here only explain the situation of second method which is harder Step:\nCreate left and right ptr while(left \u0026lt;= right), if(mid == target), return mid. If (left \u0026lt;= mid), it\u0026rsquo;s left sorted “//1 2 3 4 5 6 7 or //3 4 5 6 7 1 2”, we need to figure out if the target is on the left or right. If (target \u0026gt; nums[mid] || target \u0026lt; nums[left]) left = mid + 1. Else right = mid - 1; Because mid \u0026gt; left, so if target \u0026gt; mid, that means target is also \u0026gt; left, we eliminate the entire left side, so we should go to right. If target \u0026lt;= mid, it could be the second case where mid = 6, and we have nums on left and right meet the condition, so if target \u0026lt; left, we go right. Right side the same idea. class Solution { public: int search(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int left = 0, right = nums.size() - 1; while(left \u0026lt;= right){ int mid = (right - left) / 2 + left; if(nums[mid] == target){ return mid; }else if(nums[mid] \u0026gt; nums[right]){ if(target \u0026gt;= nums[left] \u0026amp;\u0026amp; target \u0026lt; nums[mid]){ right = mid - 1; }else{ left = mid + 1; } }else{ if(target \u0026lt;= nums[right] \u0026amp;\u0026amp; target \u0026gt; nums[mid]){ left = mid + 1; }else{ right = mid - 1; } } //4 5 6 7 0 1 2 //3 4 5 6 7 0 1 //5 6 7 0 1 2 4 //6 7 0 1 3 4 5 } return -1; } }; //0 1 2 3 4 5 6 7 //4 5 6 7 0 1 2 3 4. Median of Two Sorted Arrays There are three approaches for Median of Two Sorted Arrays: Merge the two arrays and perform a binary search. This takes O(m + n) time. Start from the beginning of both arr1 and arr2. Since we are looking for the median (the middle value), we can compare values one by one and move the pointer forward until we reach log(m+n) comparisons. Perform a binary search in the smaller array, which is the method I will explain. Steps:\nCompare the two arrays and place the smaller array first. This is important because performing the search on the smaller array helps to eliminate the case where one array is empty.\nCreate high and low pointers for the binary search on arr1.\nWhile low \u0026lt;= high, create a mid pointer for arr1 and a corresponding mid pointer for arr2. The total + 1 adjustment accounts for odd numbers, as we want to find the middle number.\nDefine left1 as arr1[i - 1] and right1 as arr1[i] (the middle value in arr1). Define left2 as arr2[j - 1] and right2 as arr2[j](the middle value in arr2).\nBy the nature of sorted arrays, left1 \u0026lt; right1 and left2 \u0026lt; right2 by default.\nWe should check if left1 \u0026lt;= right2 and left2 \u0026lt;= right1. If both conditions are met, we\u0026rsquo;ve found the left sorted partition. Update the result based on whether the total length is odd or even, then exit the loop. If left1 \u0026gt; right1, it means the current partition is too large, so adjust by setting right = i - 1. Otherwise, if left2 \u0026gt; right1, it indicates that arr1 is too small, so expand the search by setting left = i + 1.\nclass Solution { public: int p1 = 0, p2 = 0; int mergeSort(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2){ if(p1 \u0026lt; nums1.size() \u0026amp;\u0026amp; p2 \u0026lt; nums2.size()){ return nums1[p1] \u0026lt; nums2[p2] ? nums1[p1++] : nums2[p2++]; }else if(p1 \u0026lt; nums1.size()){ return nums1[p1++]; }else{ return nums2[p2++]; } return -1; } double findMedianSortedArrays(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { int m = nums1.size(), n = nums2.size(); if((m+n) % 2 == 0){ for(int i = 0; i \u0026lt; (m+n) / 2 - 1; ++i){ mergeSort(nums1, nums2); } return (double)(mergeSort(nums1, nums2) + mergeSort(nums1, nums2)) / 2; }else{ for(int i = 0; i \u0026lt; (m+n) / 2; ++i){ mergeSort(nums1, nums2); } return mergeSort(nums1, nums2); } } }; ","permalink":"https://www.ziirui-resume-website.com/posts/tech/leetcode_150/","summary":"Introduction Neetcode 150 is a popular collection of Leetcode problems designed to help programmers prepare for coding interviews. However, the tutorial videos may not always provide the most comprehensive explanations for full understanding. Therefore, I\u0026rsquo;ve decided to document my thought process while solving these problems, in the hope that it might help some of my readers. Note: This post won\u0026#39;t cover all the questions from Neetcode 150. Instead, I\u0026#39;ll focus on the ones I found particularly tricky / challenging. I trust in your ability to know the basic logic behind each topic. Sliding window Key factor: The use of unordered_map / array Use l and r, which l stays [only change when certain condition met], r keep moving Compare array for char 26 Keep each index / count in map 424.Longest Repeating Character Replacement The key for Longest Repeating is","title":"Leetcode 150"},{"content":"","permalink":"https://www.ziirui-resume-website.com/posts/life/life/","summary":"","title":"Life"},{"content":" Name: Zirui Zheng Base: New York Career: Engineer Love: Food, Music, Capybara Blog Source Source Code Blog principle My career, hustle, and life Site Inspiration Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 Kunyang\u0026#39;s Blog Kyrie Xie Yao\u0026#39;s World Hi, there. It\u0026#39;s Actually Yao ","permalink":"https://www.ziirui-resume-website.com/about/","summary":"Name: Zirui Zheng Base: New York Career: Engineer Love: Food, Music, Capybara Blog Source Source Code Blog principle My career, hustle, and life Site Inspiration Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 Kunyang\u0026#39;s Blog Kyrie Xie Yao\u0026#39;s World Hi, there. It\u0026#39;s Actually Yao","title":"🙋🏻‍♂️About Me"}]